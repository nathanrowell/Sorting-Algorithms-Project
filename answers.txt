1)
insertion sort          n=   1000: 1.36547e+06 moves,   1.36547e+06 comparisons,        0ms
insertion sort          n=   2000: 9.33034e+06 moves,   9.33034e+06 comparisons,        3ms
insertion sort          n=   4000: 4.3714e+07 moves,    4.3714e+07 comparisons,         22ms
insertion sort          n=   8000: 1.84181e+08 moves,   1.84181e+08 comparisons,        69ms
insertion sort          n=  16000: 7.48821e+08 moves,   7.48821e+08 comparisons,        247ms
merge sort              n=  32000: 479232 moves,        438562 comparisons,             8ms
merge-insertion sort    n=  32000: 63999.1 moves,       63975 comparisons,              4ms
merge sort              n=  64000: 1.5017e+06 moves,    1.37973e+06 comparisons,        26ms
merge-insertion sort    n=  64000: 191999 moves,        191950 comparisons,             15ms
merge sort              n= 128000: 3.67462e+06 moves,   3.39001e+06 comparisons,        62ms
merge-insertion sort    n= 128000: 447999 moves,        447920 comparisons,             38ms
merge sort              n= 256000: 8.27648e+06 moves,   7.66657e+06 comparisons,        139ms
merge-insertion sort    n= 256000: 959999 moves,        959887 comparisons,             87ms
merge sort              n= 512000: 1.79922e+07 moves,   1.67316e+07 comparisons,        309ms
merge-insertion sort    n= 512000: 1.984e+06 moves,     1.98384e+06 comparisons,        196ms

2)

I tried: 2,5,10,100,500

Results for 2:

merge sort              n=  32000: 479232 moves,        438574 comparisons,     8ms
merge-insertion sort            n=  32000: 63998.5 moves,       63969.2 comparisons,    6ms
merge sort              n=  64000: 1.5017e+06 moves,    1.37964e+06 comparisons,        26ms
merge-insertion sort            n=  64000: 191997 moves,        191941 comparisons,     20ms
merge sort              n= 128000: 3.67462e+06 moves,   3.38993e+06 comparisons,        62ms
merge-insertion sort            n= 128000: 447996 moves,        447909 comparisons,     49ms
merge sort              n= 256000: 8.27648e+06 moves,   7.66658e+06 comparisons,        140ms
merge-insertion sort            n= 256000: 959994 moves,        959872 comparisons,     112ms
merge sort              n= 512000: 1.79922e+07 moves,   1.67317e+07 comparisons,        297ms
merge-insertion sort            n= 512000: 1.98399e+06 moves,   1.98382e+06 comparisons,        241ms

Results for 5:

merge sort              n=  32000: 479232 moves,        438540 comparisons,     8ms
merge-insertion sort            n=  32000: 63997.9 moves,       63971.7 comparisons,    6ms
merge sort              n=  64000: 1.5017e+06 moves,    1.37964e+06 comparisons,        34ms
merge-insertion sort            n=  64000: 191995 moves,        191942 comparisons,     21ms
merge sort              n= 128000: 3.67462e+06 moves,   3.38994e+06 comparisons,        76ms
merge-insertion sort            n= 128000: 447993 moves,        447910 comparisons,     51ms
merge sort              n= 256000: 8.27648e+06 moves,   7.66623e+06 comparisons,        156ms
merge-insertion sort            n= 256000: 959990 moves,        959871 comparisons,     105ms
merge sort              n= 512000: 1.79922e+07 moves,   1.67311e+07 comparisons,        311ms
merge-insertion sort            n= 512000: 1.98399e+06 moves,   1.98383e+06 comparisons,        219ms

Results for 10:

merge sort              n=  32000: 479232 moves,        438642 comparisons,     8ms
merge-insertion sort            n=  32000: 64001.3 moves,       63977.4 comparisons,    4ms
merge sort              n=  64000: 1.5017e+06 moves,    1.37974e+06 comparisons,        25ms
merge-insertion sort            n=  64000: 192003 moves,        191956 comparisons,     15ms
merge sort              n= 128000: 3.67462e+06 moves,   3.38996e+06 comparisons,        62ms
merge-insertion sort            n= 128000: 448004 moves,        447931 comparisons,     40ms
merge sort              n= 256000: 8.27648e+06 moves,   7.6665e+06 comparisons, 139ms
merge-insertion sort            n= 256000: 960003 moves,        959899 comparisons,     91ms
merge sort              n= 512000: 1.79922e+07 moves,   1.67315e+07 comparisons,        311ms
merge-insertion sort            n= 512000: 1.984e+06 moves,     1.98386e+06 comparisons,        206ms

Results for 100:

merge sort              n=  32000: 479232 moves,        438559 comparisons,     8ms
merge-insertion sort            n=  32000: 64865.8 moves,       64847.7 comparisons,    4ms
merge sort              n=  64000: 1.5017e+06 moves,    1.37956e+06 comparisons,        26ms
merge-insertion sort            n=  64000: 193718 moves,        193682 comparisons,     15ms
merge sort              n= 128000: 3.67462e+06 moves,   3.38989e+06 comparisons,        62ms
merge-insertion sort            n= 128000: 450557 moves,        450499 comparisons,     38ms
merge sort              n= 256000: 8.27648e+06 moves,   7.66638e+06 comparisons,        137ms
merge-insertion sort            n= 256000: 963444 moves,        963356 comparisons,     85ms
merge sort              n= 512000: 1.79922e+07 moves,   1.67314e+07 comparisons,        291ms
merge-insertion sort            n= 512000: 1.98828e+06 moves,   1.98816e+06 comparisons,        184ms

Results for 500:

merge sort              n=  32000: 479232 moves,        438500 comparisons,     8ms
merge-insertion sort            n=  32000: 125045 moves,        125034 comparisons,     13ms
merge sort              n=  64000: 1.5017e+06 moves,    1.37957e+06 comparisons,        25ms
merge-insertion sort            n=  64000: 314084 moves,        314057 comparisons,     40ms
merge sort              n= 128000: 3.67462e+06 moves,   3.39e+06 comparisons,   62ms
merge-insertion sort            n= 128000: 630541 moves,        630496 comparisons,     96ms
merge sort              n= 256000: 8.27648e+06 moves,   7.66648e+06 comparisons,        140ms
merge-insertion sort            n= 256000: 1.20308e+06 moves,   1.20301e+06 comparisons,        213ms
merge sort              n= 512000: 1.79922e+07 moves,   1.67314e+07 comparisons,        298ms
merge-insertion sort            n= 512000: 2.289e+06 moves,     2.28891e+06 comparisons,        456ms


3)

Between these, the fastest was at 100. The slowest was by far 500, because at this point it was more insertion sort than merge sort. None of the others had too big of a difference in their speed, but were all faster than normal merge sort. When numbers began to be increased (by a lot), it would eventually lead to merge-insertion sort being slower than the normal merge sort, because it would spend too much time doing insertion sort, which is the slower sort.

In terms of execution time, my results for the value went: 100 > 10 > 5 > 2 > 500, implying that a number too small wouldn't be as effective as a larger number, but if the number was too large it would cause the program to run a lot slower than all the other tested values. This doesn't surprise me that much, because it is a value that is large enough where insertion sort can be utilized to a greater advantage than merge sort, but not small enough where it barely becomes effective compared to just normal merge sort.

Overall, 100 was the best for most of the subarray sizes, regardless of the overall size. I chose these sizes to test all the small variations (2,5,10) and then since I noticed there wasn't too much of a difference, I increased by a large amount (to 100) and still didn't notice much of a difference, so I increased to 500 where I saw a drastic difference overall, and decided those data points were just too assert that you want a number that is large, but not too large, like 100.